string.bold = function(self)
    if not self isa string then return null
    return "<b>"+self+"</b>"
end function
bold = @string.bold

string.italic = function(self)
    if not self isa string then return null
    return "<i>"+self+"</i>"
end function
italic = @string.italic

string.underline = function(self)
    if not self isa string then return null
    return "<u>"+self+"</u>"
end function
underline = @string.underline

string.color = function(self, color)
    if not self isa string then return null
    return "<color="+color+">"+self+"</color>"
end function
color = @string.color

string.rainbow = function(self)
	if not self isa string then return null
    hexColor = function(n, d = 0)
        cs = "0123456789abcdef"
        c = 1
        x = (1 - abs((n / 60) % 2 - 1))
        m = 0
        l = [0, 0, 0]
        if 0 <= n and n < 60 then
            l = [c, x, 0]
        else if 60 <= n and n < 120 then
            l = [x, c, 0]
        else if 120 <= n and n < 180 then
            l = [0, c, x]
        else if 180 <= n and n < 240 then
            l = [0, x, c]
        else if 240 <= n and n < 300 then
            l = [x, 0, c]
        else
            l = [c, 0, x]
        end if
        r = (l[0] + m) * 255
        g = (l[1] + m) * 255
        b = (l[2] + m) * 255
        hex = "#"
        for i in [r, g, b]
            fv = floor(i / 16)
            sv = i % 16
            hex = hex + cs[fv] + cs[sv]
        end for
        return hex
    end function
	out = ""
	for i in self
		out = out+"<"+hexColor(__i_idx*(360/len(self)))+">"+i+"</color>"
	end for
	return out
end function
rainbow = @string.rainbow

string.alpha = function(self, alpha)
    if not self isa string then return null
    return "<alpha="+alpha+">"+self+"</alpha>"
end function
alpha = @string.alpha

string.mark = function(self, mark)
    if not self isa string then return null
    return "<mark="+mark+">"+self+"</mark>"
end function
mark = @string.mark

string.Size = function(self, px)
    if not self isa string then return null
    return "<size="+px+">"+self+"</size>"
end function
Size = @string.Size

string.escape = function(self)
    if not self isa string then return null
    return self.replace("(?=\\|\.|\+|\*|\?|\^|\$|\(|\)|\[|\]|\{|\}|\|)","\")
end function
escape = @string.escape

string.startswith = function(self, start)
    if not self isa string then return null
    return self[:len(start)] == start
end function
startswith = @string.startswith

string.endswith = function(self, start)
    if not self isa string then return null
    return self[-len(start):] == start
end function
endswith = @string.endswith

map.hasValue = function(self, item)
    if not self isa map then return null
    return self.indexOf(item) != null
end function
list.hasValue = function(self, item)
    if not self isa list then return null
    return self.indexOf(item) != null
end function
string.hasValue = function(self, item)
    if not self isa string and not self isa list and not self isa map then return null
    return self.indexOf(item) != null
end function
hasValue = @string.hasValue